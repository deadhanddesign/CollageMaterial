{% comment %}
  Requires:
    - tile-type: {String} 'header', 'large', 'medium', 'small', 'featured', 'footer', 'cta'
    - tile-content: {Object} caprtured content to be rendered in the tile, then pass object to the component

  Example:
      {% capture tile-content %}
        ...content...
      {% endcapture %}

      {% render 'component-tile', tile-type: 'large',  tile-content: {{tile-content}}  %}
{% endcomment %}

{% if tile-type == 'header' %}
  <header class="tile tile--large">
    <div class="tile__track">
      {{ tile-content }}
    </div>
  </header>
{% elsif tile-type == 'footer' %}
  <footer class="tile tile--large">
    <div class="tile__track">
      {{ tile-content }}
    </div>
  </footer>
{% else %}
  <div
    {% if tile-type == 'large' %}
      class="tile tile--large"
    {% elsif tile-type == 'medium' %}
      class="tile tile--medium"
    {% elsif tile-type == 'small' %}
      class="tile tile--small"
    {% elsif tile-type == 'featured' %}
      class="tile tile--large tile--featured"
    {% elsif tile-type == 'cta' %}
      class="tile tile--large tile--tertiary"
    {% else %}
      class="tile"
    {% endif %}
  >
    <div class="tile__track">
      {{ tile-content }}
    </div>
  </div>
{% endif %}

{% style %}
  .tile {
    background: var(--md-sys-color-primary-container);
    color: var(--md-sys-color-on-primary-container);
    padding: var(--spacing-padding-xlarge);
    border-radius: var(--border-radius-xlarge);
    overflow: clip;
  }

  .tile--large {
    width: min(100%, 1920px);
  }

  .tile--medium {
    width: min(66%, 1280px);
  }

  .tile--small {
    width: min(33%, 640px);
  }

  .tile--featured {
    background: var(--md-sys-color-surface);
    color: var(--md-sys-color-on-background);
    font: var(--md-sys-typescale-body-medium);
    padding: 0;
  }

  .tile--secondary {
    background: var(--md-sys-color-secondary-container);
    color: var(--md-sys-color-on-secondary-container);
    --md-sys-color-primary: var(--md-sys-color-secondary);
    --md-sys-color-on-primary: var(--md-sys-color-on-secondary);
    --md-sys-color-primary-container: var(--md-sys-color-secondary-container);
    --md-sys-color-on-primary-container: var(--md-sys-color-on-secondary-container);
    --md-sys-color-primary-fixed: var(--md-sys-color-secondary-fixed);
    --md-sys-color-primary-fixed-dim: var(--md-sys-color-secondary-fixed-dim);
    --md-sys-color-on-primary-fixed: var(--md-sys-color-on-secondary-fixed);
    --md-sys-color-on-primary-fixed-variant: var(--md-sys-color-on-secondary-fixed-variant);
  }

  .tile--tertiary {
    background: var(--md-sys-color-tertiary-container);
    color: var(--md-sys-color-on-tertiary-container);
    --md-sys-color-primary: var(--md-sys-color-tertiary);
    --md-sys-color-on-primary: var(--md-sys-color-on-tertiary);
    --md-sys-color-primary-container: var(--md-sys-color-tertiary-container);
    --md-sys-color-on-primary-container: var(--md-sys-color-on-tertiary-container);
    --md-sys-color-primary-fixed: var(--md-sys-color-tertiary-fixed);
    --md-sys-color-primary-fixed-dim: var(--md-sys-color-tertiary-fixed-dim);
    --md-sys-color-on-primary-fixed: var(--md-sys-color-on-tertiary-fixed);
    --md-sys-color-on-primary-fixed-variant: var(--md-sys-color-on-tertiary-fixed-variant);
  }

  .tile__track {
    position: sticky;
    top: 0;
    align-self: flex-start;
    margin: 0 auto;
    width: fit-content;
  }

  header.tile {
    & .tile__track {
      width: 100%;
    }
  }

  .hero__overline {
    height: 300px;
  }

  .hero__subheader {
    font: var(--md-sys-typescale-headline-small);
    & a {
      font: var(--md-sys-typescale-headline-large);
      text-decoration: none;
      color: inherit;
    }
  }
{% endstyle %}
